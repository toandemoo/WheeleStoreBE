// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Data;

#nullable disable

namespace Project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250624180204_update005")]
    partial class update005
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project.Entities.Brands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("brands");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yamaha"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Suzuki"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SYM"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "VinFast"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Piaggio"
                        });
                });

            modelBuilder.Entity("Project.Entities.CarTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("carTypes");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Manual"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Scooter"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Clutch Bike"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Electric Bike"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Motorbike"
                        });
                });

            modelBuilder.Entity("Project.Entities.Cars", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("INT")
                        .HasColumnName("BrandId");

                    b.Property<int>("CarTypeId")
                        .HasColumnType("INT")
                        .HasColumnName("CarTypeId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("ImageUrl");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("LicensePlate");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Name");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasColumnName("PricePerDay");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CarTypeId");

                    b.ToTable("cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 11,
                            CarTypeId = 11,
                            CreatedAt = new DateTime(2025, 6, 25, 1, 2, 2, 968, DateTimeKind.Local).AddTicks(1244),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "33E-33333",
                            Name = "Honda Wave Alpha",
                            PricePerDay = 18000000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 11,
                            CarTypeId = 12,
                            CreatedAt = new DateTime(2025, 6, 25, 1, 2, 2, 968, DateTimeKind.Local).AddTicks(1263),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "35G-55555",
                            Name = "Honda Vision",
                            PricePerDay = 31000000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 12,
                            CarTypeId = 11,
                            CreatedAt = new DateTime(2025, 6, 25, 1, 2, 2, 968, DateTimeKind.Local).AddTicks(1265),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "34F-44444",
                            Name = "Yamaha Sirius",
                            PricePerDay = 19000000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 12,
                            CarTypeId = 13,
                            CreatedAt = new DateTime(2025, 6, 25, 1, 2, 2, 968, DateTimeKind.Local).AddTicks(1267),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "33E-33333",
                            Name = "Yamaha Exciter 155",
                            PricePerDay = 47000000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 13,
                            CarTypeId = 13,
                            CreatedAt = new DateTime(2025, 6, 25, 1, 2, 2, 968, DateTimeKind.Local).AddTicks(1269),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "32D-22222",
                            Name = "Suzuki Raider R150",
                            PricePerDay = 50000000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 14,
                            CarTypeId = 11,
                            CreatedAt = new DateTime(2025, 6, 25, 1, 2, 2, 968, DateTimeKind.Local).AddTicks(1271),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "31C-11111",
                            Name = "SYM Elegant 50",
                            PricePerDay = 17000000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 15,
                            CarTypeId = 14,
                            CreatedAt = new DateTime(2025, 6, 25, 1, 2, 2, 968, DateTimeKind.Local).AddTicks(1273),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "30B-67890",
                            Name = "VinFast Klara",
                            PricePerDay = 39000000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 16,
                            CarTypeId = 12,
                            CreatedAt = new DateTime(2025, 6, 25, 1, 2, 2, 968, DateTimeKind.Local).AddTicks(1275),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "29A-12345",
                            Name = "Piaggio Liberty",
                            PricePerDay = 56000000m,
                            Status = "Available"
                        });
                });

            modelBuilder.Entity("Project.Entities.OrderCars", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("INT");

                    b.Property<int>("CarId")
                        .HasColumnType("INT");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "CarId");

                    b.HasIndex("CarId");

                    b.ToTable("orderCars");
                });

            modelBuilder.Entity("Project.Entities.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CodeOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Code")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Status");

                    b.Property<int>("UserId")
                        .HasColumnType("INT")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Project.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("FullName");

                    b.Property<string>("Password")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Role")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Role");

                    b.Property<string>("profileImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profileImage");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Project.Entities.WishList", b =>
                {
                    b.Property<int>("Userid")
                        .HasColumnType("INT");

                    b.Property<int>("Carid")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WishListId")
                        .HasColumnType("int");

                    b.HasKey("Userid", "Carid");

                    b.HasIndex("Carid");

                    b.ToTable("wishLists");
                });

            modelBuilder.Entity("ProjectBE.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("refreshTokens");
                });

            modelBuilder.Entity("Project.Entities.Cars", b =>
                {
                    b.HasOne("Project.Entities.Brands", "Brands")
                        .WithMany("Cars")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Entities.CarTypes", "CarTypes")
                        .WithMany("Cars")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brands");

                    b.Navigation("CarTypes");
                });

            modelBuilder.Entity("Project.Entities.OrderCars", b =>
                {
                    b.HasOne("Project.Entities.Cars", "Car")
                        .WithMany("OrderCars")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Entities.Orders", null)
                        .WithMany("OrderCars")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Project.Entities.Orders", b =>
                {
                    b.HasOne("Project.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project.Entities.WishList", b =>
                {
                    b.HasOne("Project.Entities.Cars", "Cars")
                        .WithMany("WishList")
                        .HasForeignKey("Carid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cars");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project.Entities.Brands", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Project.Entities.CarTypes", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Project.Entities.Cars", b =>
                {
                    b.Navigation("OrderCars");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("Project.Entities.Orders", b =>
                {
                    b.Navigation("OrderCars");
                });
#pragma warning restore 612, 618
        }
    }
}
